{
  "language": "Solidity",
  "sources": {
    "contracts/NftMarketplace.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nerror NftMarketplace__PriceMustBeAboveZero();\nerror NftMarketplace__NotApprovedForMarketplace(\n    address Set,\n    address Marketplace\n);\nerror NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__NotOwner();\nerror NftMarketplace__NotListed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__PriceNotMet(\n    address tokenAddress,\n    uint256 tokenId,\n    uint256 price\n);\nerror NftMarketplace__NoProceeds();\nerror NftMarketplace__TransferFailed();\n\ncontract NftMarketplace {\n    // 1. List NFTs ✅\n    // 2. Buy NFTs ✅\n    // 3. Cancel Listing ✅\n    // 4. Update Listing price ✅\n    // 5. Withdraw payment from NFTs sold ✅\n\n    struct Listing {\n        uint256 price;\n        address seller;\n    }\n\n    event ItemList(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemCanceled(\n        address indexed owner,\n        address indexed tokenAddress,\n        uint256 indexed tokenId\n    );\n\n    event PriceUpdated(\n        address changer,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    );\n\n    event Withdrawal(address indexed owner, uint256 indexed proceeds);\n\n    //NFT Contract Address -> NFT TokenId -> Listing\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    // Seller address to amount earned\n    mapping(address => uint256) private s_proceeds;\n\n    ///////////////\n    // MODIFIERS //\n    ///////////////\n\n    modifier onlyUnlisted(\n        address tokenAddress,\n        uint256 tokenId,\n        address owner\n    ) {\n        Listing memory listing = s_listings[tokenAddress][tokenId];\n        if (listing.price > 0) {\n            revert NftMarketplace__AlreadyListed(tokenAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address spender\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        address owner = nft.ownerOf(tokenId);\n        if (spender != owner) {\n            revert NftMarketplace__NotOwner();\n        }\n        _;\n    }\n\n    modifier isListed(address nftAddress, uint256 tokenId) {\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price <= 0) {\n            revert NftMarketplace__NotListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier holdFunds(address holder) {\n        if (s_proceeds[holder] <= 0) {\n            revert NftMarketplace__NoProceeds();\n        }\n        _;\n    }\n\n    ////////////////////\n    // MAIN FUNCTIONS //\n    ////////////////////\n\n    /**\n     * @notice Listing your NFT to the marketplace\n     * @param nftAddress The address of the token that will be listed\n     * @param tokenId The IF of the token\n     * @param price The price in uint of the token\n     * @dev This prevents non owners of the token to list and also checks the token has not been listed, price must be above 0.\n     * People will still have tokens in their Wallets this way...\n     */\n    function listItem(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    )\n        external\n        onlyUnlisted(nftAddress, tokenId, msg.sender)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        if (price <= 0) {\n            revert NftMarketplace__PriceMustBeAboveZero();\n        }\n        // We can do this in two ways (I have seen both of them):\n        //  1. Send the NFT to the contract, so the contract would \"hold\" the piece. (Const more gas)\n        //  2. Owners do an apprroval to the marketplace so they keep their piece but we can sell it if they\n        //  do not cancel the approval.abi\n\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.getApproved(tokenId) != address(this)) {\n            revert NftMarketplace__NotApprovedForMarketplace({\n                Set: nft.getApproved(tokenId),\n                Marketplace: address(this)\n            });\n        }\n        //Array or Mapping? -> Mapping (Array would be huge and more complicated...)\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\n        emit ItemList(msg.sender, nftAddress, tokenId, price);\n    }\n\n    function buyItem(address nftAddress, uint256 tokenId)\n        external\n        payable\n        isListed(nftAddress, tokenId)\n    {\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\n        if (msg.value < listedItem.price) {\n            revert NftMarketplace__PriceNotMet(\n                nftAddress,\n                tokenId,\n                listedItem.price\n            );\n        }\n        s_proceeds[listedItem.seller] += msg.value;\n        delete (s_listings[nftAddress][tokenId]);\n        IERC721(nftAddress).safeTransferFrom(\n            listedItem.seller,\n            msg.sender,\n            tokenId\n        );\n        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\n    }\n\n    function cancelListing(address nftAddress, uint256 tokenId)\n        external\n        isOwner(nftAddress, tokenId, msg.sender)\n        isListed(nftAddress, tokenId)\n    {\n        delete (s_listings[nftAddress][tokenId]);\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\n    }\n\n    function updatePrice(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    )\n        external\n        isOwner(nftAddress, tokenId, msg.sender)\n        isListed(nftAddress, tokenId)\n    {\n        s_listings[nftAddress][tokenId].price = newPrice;\n        emit PriceUpdated(msg.sender, nftAddress, tokenId, newPrice);\n    }\n\n    function withdraw() external holdFunds(msg.sender) {\n        uint256 balances = s_proceeds[msg.sender];\n        if (address(this).balance >= balances) {\n            s_proceeds[msg.sender] = 0;\n            (bool success, ) = msg.sender.call{value: balances}(\"\");\n            if (!success) {\n                revert NftMarketplace__TransferFailed();\n            }\n        }\n        emit Withdrawal(msg.sender, balances);\n    }\n\n    //////////////////////\n    // GETTER FUNCTIONS //\n    //////////////////////\n\n    function getListing(address nftAddress, uint256 tokenId)\n        public\n        view\n        returns (Listing memory)\n    {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    function getItemPrice(address nftAddress, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        return s_listings[nftAddress][tokenId].price;\n    }\n\n    function getProceeds() public view returns (uint256) {\n        return s_proceeds[msg.sender];\n    }\n\n    function getOwner(address nftAddress, uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        IERC721 nft = IERC721(nftAddress);\n        address owner = nft.ownerOf(tokenId);\n        return owner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}